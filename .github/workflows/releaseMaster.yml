name: "[master] Release"

on:
  push:
    branches:
      - "master"
    paths:
      - "package.json"
  workflow_dispatch:  # Allow manual triggering

jobs:
  Build:
    uses: ./.github/workflows/build.yml

  Release:
    name: Release latest on GitHub
    needs: Build
    runs-on: ubuntu-latest

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          name: luna-artifacts
          path: ./dist/

      - name: Get version from package.json
        run: |
          VERSION=$(jq -r .version ./dist/package.json)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Publish dev release on GitHub
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: ${{ env.VERSION }}
          prerelease: false
          title: Release ${{ env.VERSION }}
          files: ./dist/luna.zip

  Update-Hashes:
    name: Update Nix Hashes
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'push' && github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Nix
        uses: cachix/install-nix-action@v20

      - name: Get current version
        id: version
        run: |
          if [ -f "package.json" ]; then
            VERSION=$(jq -r .version package.json)
          else
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.6.13-beta")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Build and extract correct hashes
        id: extract_hashes
        run: |
          # First, remove the source hash to let Nix tell us the correct one
          sed -i '/hash =/d' nix/package.nix
          
          # Try to build and capture the actual hashes from error messages
          nix build .#injection 2>&1 | tee build.log || true
          
          # Extract the ACTUAL source hash (what fetchFromGitHub should use)
          ACTUAL_SOURCE_HASH=$(grep -o "got:.*sha256-[a-zA-Z0-9+/]*=" build.log | head -1 | cut -d':' -f2 | xargs || echo "")
          echo "actual_source_hash=$ACTUAL_SOURCE_HASH" >> $GITHUB_OUTPUT
          echo "Actual source hash from build: $ACTUAL_SOURCE_HASH"
          
          # If we have the source hash, update the file and try to get pnpm hash
          if [ -n "$ACTUAL_SOURCE_HASH" ]; then
            # Update source hash
            sed -i "s|src = fetchFromGitHub {|src = fetchFromGitHub {\n    hash = \"$ACTUAL_SOURCE_HASH\";|" nix/package.nix
            
            # Now try to build again to get pnpm deps hash
            nix build .#injection 2>&1 | tee build2.log || true
            
            # Extract pnpm deps hash from the new error
            PNPM_HASH=$(grep -o "got:.*sha256-[a-zA-Z0-9+/]*=" build2.log | head -1 | cut -d':' -f2 | xargs || echo "")
            if [ -n "$PNPM_HASH" ]; then
              echo "pnpm_hash=$PNPM_HASH" >> $GITHUB_OUTPUT
              echo "PNPM deps hash: $PNPM_HASH"
            else
              # If no error, the build succeeded and we can extract the pnpm hash differently
              echo "Build succeeded, extracting pnpm hash from derivation"
              PNPM_HASH=$(nix eval .#injection.pnpmDeps.outputHash --raw 2>/dev/null || echo "")
              echo "pnpm_hash=$PNPM_HASH" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Update hashes in package.nix
        run: |
          echo "Updating package.nix with:"
          echo "Source hash: ${{ steps.extract_hashes.outputs.actual_source_hash }}"
          echo "PNPM hash: ${{ steps.extract_hashes.outputs.pnpm_hash }}"
          
          # Update source hash (only in the src block)
          if [ -n "${{ steps.extract_hashes.outputs.actual_source_hash }}" ]; then
            # First, ensure there's a hash line in the src block
            if ! grep -q 'hash =' nix/package.nix; then
              sed -i '/src = fetchFromGitHub {/a\    hash = "";' nix/package.nix
            fi
            # Now update the source hash using | as delimiter to avoid / conflicts
            sed -i '/src = fetchFromGitHub {/,/}/ s|hash = "[^"]*"|hash = "${{ steps.extract_hashes.outputs.actual_source_hash }}"|' nix/package.nix
          fi
          
          # Update pnpm deps hash (only in the pnpmDeps block)
          if [ -n "${{ steps.extract_hashes.outputs.pnpm_hash }}" ]; then
            # First, ensure there's a hash line in the pnpmDeps block
            if ! grep -q 'hash =' nix/package.nix; then
              sed -i '/pnpmDeps = pnpm.fetchDeps {/a\    hash = "";' nix/package.nix
            fi
            # Now update the pnpm hash using | as delimiter to avoid / conflicts
            sed -i '/pnpmDeps = pnpm.fetchDeps {/,/}/ s|hash = "[^"]*"|hash = "${{ steps.extract_hashes.outputs.pnpm_hash }}"|' nix/package.nix
          fi
          
          echo "Updated package.nix:"
          cat nix/package.nix

      - name: Test the updated package.nix
        run: |
          echo "Testing if the package builds with updated hashes..."
          nix build .#injection --print-build-logs && echo "✅ Build successful!" || echo "❌ Build failed"

      - name: Commit updated hashes
        if: success()
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci: update nix hashes for ${{ steps.version.outputs.version }}"
          file_pattern: nix/package.nix
          branch: ${{ github.head_ref || 'master' }}
